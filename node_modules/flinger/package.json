{
  "name": "flinger",
  "version": "0.2.10",
  "description": "Flinger flings logs from your browser clients back to your node servers so you can see what your users are up to.",
  "main": "server.js",
  "scripts": {
    "test": "make test",
    "start": "node server.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/wballard/flinger.git"
  },
  "keywords": [
    "console",
    "log",
    "express",
    "connect",
    "middleware"
  ],
  "author": {
    "name": "Will Ballard"
  },
  "license": "BSD",
  "bugs": {
    "url": "https://github.com/wballard/flinger/issues"
  },
  "dependencies": {
    "connect": ">2.0.0",
    "uglify-js": "~2.3.6"
  },
  "devDependencies": {
    "mocha": "~1.12.0",
    "coffee-script": "~1.6.3",
    "zombie": "~2.0.0-alpha19",
    "chai": "~1.7.2",
    "nodemon": "~0.7.8"
  },
  "readme": "# Why Care?\n\nWeb applications, and single page applications in particular, make it\nhard to see errors that are happening in client side JavaScript.\n\n# What It Does\n\nFlinger flings logs from your browser clients back to your node servers\nso you can see what your users are up to.\n\n# What It Is\n\nFlinger is node _middleware_ for [express](https://github.com/visionmedia/express) or [connect](https://github.com/senchalabs/connect) that does two things:\n\n* For the client, serves a client library that monkey patches\n    * `console.log`\n    * `console.error`\n    * `Error`\n* For the server, provides a receiver that catches and logs client logs\n\n# How To Use It\n\n**Flinger uses jQuery for HTTP back to the server**. Make sure it is in\nyour page.\n\nHere is the most basic installation possible:\n\n`npm install flinger`\n\n```javascript\nvar path = require('path');\nvar express = require('express');\nvar flinger = require('flinger');\nvar app = express()\n    .use(express.cookieParser())\n    .use(express.static(path.join(__dirname, 'client')))\n    .use(flinger())\n    .listen(9999);\n```\n\nFlinger serves its client library automatically as a convenience, so on\nthe client:\n\n```html\n<script type=\"text/javascript\" src=\"/flinger.js\"></script>\n```\n\nThis redirects, by default:\n\n* client `console.log(...)` to server `console.log(...)`\n* client `console.error(...)` to server `console.error(...)`\n* client `new Error(...)` to server `console.error(...)`\n\n## Fancy Server Use\n\nFlinger lets you hook to reformat or log as you see fit, flinger really\nis:\n\n`flinger(onConsoleLog, onConsoleWarn, onConsoleError, onException)`\n\nEach of the `onXXX` functions is:\n\n`function handler(logEvent){}`\n\nEach `logEvent` is:\n\n* `request`, flinger logs over HTTP, so you can get at cookies etc to\n  identify users and make custom logs\n* `arguments`, the javascript `arguments` captured on the client\n  function\n\n## Fancy Client Use\nIf you want to prefix the flinger log messages, say with your user\nsession or user identifier -- we already thought of that:\n\n```javascript\nwindow.flingerAdditionalClientData = function () {\n  return \"Your User ID Here!\";\n}\n```\n\nWant to format your messages:\n```javascript\nwindow.flingerFormatter = function(x){\n\treturn \"Your Format Here!\";\n}\n```\n\nYou can do this anywhere you like client side. Yep, it's a global\nfunction, but did we mention that we're monkey patching console.log to\nmake this work? Don't panic.\n\n\nAnd you can switch things off, which will log locally but not\ngot to the server:\n\n```javascript\nconsole.log.on = false;\nconsole.warn.on = true;\nconsole.error.on = true;\nconsole.exception.on = true;\n```\n\n## Server side log customizations\n\n\nBy default flinger will log out the error from the client. But what if\nyou want more information from the request, or prepend something to the\nlog output?\n\nFlinger has that covered with augmentLog.\n\nUsage to prepend a date for each log message, and append some request\nheader fields:\n\n\n<pre><code>\nvar flinger_handler = flinger();\nflinger_handler.augmentLog = function (logArguments,request) {\n  var stamp = new Date();\n  logArguments.unshift(stamp + \" Client side error >> \");\n  logArguments.push(\"UserAgent : \"+ request.headers['user-agent']);\n  logArguments.push(\"Referer : \"+ request.headers['referer']);\n};\n// now register this handler with the middleware stack\napp.use(flinger_handler);\n</code></pre>\n\n",
  "readmeFilename": "README.md",
  "_id": "flinger@0.2.10",
  "dist": {
    "shasum": "9fe84cb656202cf27ed5fc982789beaaaac241d9",
    "tarball": "http://registry.npmjs.org/flinger/-/flinger-0.2.10.tgz"
  },
  "_from": "flinger@*",
  "_npmVersion": "1.3.8",
  "_npmUser": {
    "name": "wballard",
    "email": "wballard@mailframe.net"
  },
  "maintainers": [
    {
      "name": "wballard",
      "email": "wballard@mailframe.net"
    }
  ],
  "directories": {},
  "_shasum": "9fe84cb656202cf27ed5fc982789beaaaac241d9",
  "_resolved": "https://registry.npmjs.org/flinger/-/flinger-0.2.10.tgz"
}
